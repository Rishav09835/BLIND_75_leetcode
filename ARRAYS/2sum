//BRUTE FORCE SOLUTION O(N^2)
vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
            int x = target-nums[i];
            for(int j=i+1;j<nums.size();j++){
                if(nums[j]==x){
                    ans.push_back(i);
                    ans.push_back(j);
                    break;
                }
            }
        }
        return ans;
    }
-----------------------------------------------------------------------------------------------
//OPTIMAL SOLUTION TC= O(n) , SC=O(n) 
vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> mp;
        int n = nums.size();
        for(int i = 0; i<n; i++){
            int val = target - nums[i];
            if(mp.find(val)!=mp.end()){
                return {i,mp[val]};
            }
            mp[nums[i]]=i;
        }
        return {-1,-1};

    }
