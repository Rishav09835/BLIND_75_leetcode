//Brute Force : O(n^2)
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n, 0);

        for (int i = 0; i < n; i++) {
            int prod = 1;
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    prod *= nums[j];
                }
            }
            ans[i] = prod;
        }
        return ans;
    }
------------------------------------------------------------------------------------------------------
//Better Approach:
(* First, compute prefix_prod[] and suffix_prod[].
Then, compute ans[i] as prefix_prod[i-1] * suffix_prod[i+1].
Time Complexity: O(n)
Space Complexity: O(n) (Due to prefix_prod[] and suffix_prod[]) *)

    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> prefix_prod(n, 0);
        vector<int> suffix_prod(n, 0);

        prefix_prod[0] = nums[0];
        suffix_prod[n - 1] = nums[n - 1];

        for (int i = 1; i < n; i++) {
            prefix_prod[i] = prefix_prod[i - 1] * nums[i];
        }

        for (int i = n - 2; i >= 0; i--) {
            suffix_prod[i] = suffix_prod[i + 1] * nums[i];
        }

        vector<int> ans(n, 0);
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                ans[i] = suffix_prod[i + 1];
            } else if (i == n - 1) {
                ans[i] = prefix_prod[i - 1];
            } else {
                ans[i] = prefix_prod[i - 1] * suffix_prod[i + 1];
            }
        }

        return ans;
    }
    
-------------------------------------------------------------------------------------------------
// optimised approach :
(* First loop calculates prefix product in ans[].
Second loop calculates suffix product while modifying ans[].
Time Complexity: O(n)
Space Complexity: O(1) (Using ans[] as in-place storage) *)
vector<int> productExceptSelf(vector<int>& nums) {
        //optimised Tc =O(n) Sc=O(1);
        int n = nums.size();
        vector<int>ans(n,0);

        int prefix = 1;
        for(int i=0;i<n;i++){
            ans[i]=prefix;
            prefix = prefix*nums[i];
            cout<<prefix<<" ";
        }

        int suffix=1;
        for(int i=n-1;i>=0;i--){
            ans[i]=ans[i]*suffix;
            suffix = suffix * nums[i];
            cout<<suffix<<" ";
        }
        return ans;

    }
