uint32_t reverseBits(uint32_t n) {
        uint32_t ans=0;
        for(int i=0;i<32;i++){
            uint32_t bit = n&1; //extract the lsb bit.
            uint32_t pos = 31-i; //find its correct position in answer.
            bit = bit<<pos; //shift the bit into its new position.
            ans = ans | bit; //combine the bit with result to form the answer.
            n=n>>1; //right shift n by 1 to process next bit.
        }
        return ans;
    }
------------------------------------------------------------------------------------------
steps involved:
Initialize Result: Start with an answer variable (ans) set to 0.
Loop Over Bits: There are 32 bits in a 32-bit integer, so loop 32 times.
Extract Bit: Use n & 1 to get the current least significant bit.
Determine New Position: The bit from index i in the original number should move to index 31 - i in the reversed number.
Shift & Combine: Shift the bit to its new position and then merge it into ans using the bitwise OR (|) operator.
Update Input: Right shift n to remove the processed bit.
Return: After the loop, ans contains the reversed bits.
